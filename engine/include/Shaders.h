namespace shaders {
namespace simple {
const char vs_shader[] =
    "cbuffer PerModelConstants : register (b0)\n"
    "{\n"
    "	matrix MVP;\n"
    "}\n"
    "struct VertexShaderOutput\n"
    "{\n"
    "	float4 position : SV_POSITION;\n"
    "	float2 uv : TEXCOORD;\n"
    "};\n"
    "VertexShaderOutput VS_main(\n"
    "	float3 position : POSITION,\n"
    "	float2 uv : TEXCOORD)\n"
    "{\n"
    "	VertexShaderOutput output;\n"
    "   output.position = mul(MVP, float4(position, 1));\n"
    "	output.uv = uv;\n"
    "	return output;\n"
    "}\n";
const char fs_shader[] =
    "Texture2D<float4> inputTexture : register(t0);\n"
    "SamplerState     texureSampler : register(s0);\n"
    "float4 PS_main (float4 position : SV_POSITION,\n"
    "				float2 uv : TEXCOORD) : SV_TARGET\n"
    "{\n"
    "	return inputTexture.Sample (texureSampler, uv);\n"
    "}\n";
}  // namespace simple
namespace directionalLight {
const char vs_shader[] =
    "cbuffer PerModelConstants : register (b0)\n"
    "{\n"
    "	matrix MVP;\n"
    "	matrix Model;\n"
    "	float4 LightPos;\n"
    "	float4 LightDir;\n"
    "}\n"
    "struct VertexShaderOutput\n"
    "{\n"
    "	float4 position : SV_POSITION;\n"
    "	float2 uv : TEXCOORD0;\n"
    "	float3 normal : NORMAL;\n"
    "	float3 positionWorld : TEXCOORD1;\n"
    "};\n"
    "VertexShaderOutput VS_main(\n"
    "	float3 position : POSITION,\n"
    "	float2 uv : TEXCOORD,\n"
    "	float3 normal : NORMAL)\n"
    "{\n"
    "	VertexShaderOutput output;\n"
    "   float4 positionWorldSpace = mul(Model, float4(position, 1));"
    "   output.positionWorld = positionWorldSpace.xyz;"
    "   output.position = mul(MVP, float4(position, 1));\n"
    "	output.uv = uv;\n"
    "	output.normal = mul((float3x3)Model, normal);;\n"
    "	return output;\n"
    "}\n";
const char fs_shader[] =
    "cbuffer PerModelConstants : register (b0)\n"
    "{\n"
    "	matrix MVP;\n"
    "	matrix Model;\n"
    "	float4 LightPos;\n"
    "	float4 LightDir;\n"
    "}\n" 
    "Texture2D<float4> inputTexture : register(t0);\n"
    "SamplerState     texureSampler : register(s0);\n"
    "float4 PS_main (float4 position : SV_POSITION,\n"
    "				float2 uv : TEXCOORD0, float3 normal : NORMAL, float3 positionWorld : TEXCOORD1) : SV_TARGET\n"
    "{\n" 
    "	float4 diffuseLighting = inputTexture.Sample (texureSampler, uv);\n" 
    "   float3 fragmentToLightDir = normalize(LightPos.xyz - positionWorld);"
    "   float cosAngle = saturate(dot(normalize(LightDir.xyz), normalize(positionWorld - LightPos.xyz)));"
    "   float lightFactor = 0.0;" 
    "   if (cosAngle < 1 && cosAngle >= 0.99) lightFactor += smoothstep(0.99, 1, cosAngle); /* degree [0 : 9] */"
    "   if (cosAngle < 1 && cosAngle >= 0.956) lightFactor += smoothstep(0.956, 1, cosAngle); /* degrees [9 : 17] */"
    "   if (cosAngle < 0.985 && cosAngle >= 0.94) lightFactor += 1.0 - smoothstep(0.94, 0.985, cosAngle); /* degrees [10 : 19] */"
    "   if (cosAngle < 0.94 && cosAngle >= 0.92) lightFactor = max(smoothstep(0.92, 0.94, cosAngle), pow(0.3, 2)); /* degrees [19 : 22] */"
    "   if (cosAngle < 0.92) lightFactor = pow(0.3 * cosAngle / 0.92, 2.0); /* over 24 degrees */"
    "   float radius = 1000.0;"
    "   float attenuation  = 1.0 - pow(saturate(length(LightPos.xyz - positionWorld) / radius), 3);"
    "   attenuation  =  lightFactor * attenuation;"
    "   float3 viewDir  = fragmentToLightDir;"
    "   float3 reflectDir = reflect(-fragmentToLightDir, normal);"
    "   float3 halfwayDir = normalize(fragmentToLightDir + viewDir);"
    "   float specLightingPhong = pow(saturate(dot(viewDir, reflectDir)), 1.7);"
    "   float specLightingBlinn = pow(saturate(dot(normal, halfwayDir)), 0.98);"
    "   float specLighting = 1.5 * specLightingPhong + 0.55 * specLightingBlinn;"
    "	float4 specular = float4(specLighting, specLighting, specLighting, 1.0);\n"
    "	return float4(attenuation, attenuation, attenuation, 1.0) * saturate(diffuseLighting * float4(0.6, 0.6, 0.6, 1.0)  + lightFactor * specular * 0.2);\n"
    "}\n";
}  // namespace directionalLight
}  // namespace shaders
